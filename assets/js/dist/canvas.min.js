/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports) {

	
	console.log('this is one');
	( function( ElementAPI, SettingAPI, Views ) {
	  console.log('this is two');

	    'use strict';

		// Do something when the element renders
		ElementAPI.onRender( 'tailor_flipcard', function( atts, model ) {

			// Do something with the current attributes or element model
			console.log( atts );
			console.log( model );

			// Or update the DOM (the function is scoped to the element view)
			console.log( this.el );
	    console.log('this is onRender');
			//console.log( this.$el );
	    } );

		// Respond to an element setting change
		SettingAPI.onChange( 'element:tailor_flipcard', function( to, from, model ) {

			// Do something with the DOM (the function is scoped to the element view)
			this.el.classList.add( 'custom-background-color' );
			this.$el.css( { 'background-color' : to } );

	    console.log('this is onChange');
			console.log(this);

	    console.log('that was this');
			// Or return a collection of custom CSS rules to apply
			return [ {
				selectors: [ '', '.selector-within-element' ],
				declarations: {
					'background-color' : to
				}
			} ];
		} );

		// Respond to a sidebar setting change
		SettingAPI.onChange( 'sidebar:setting_id', function( to, from ) {
			// Do something
		} );

		app.on( 'before:start', function() {
			// Register custom views or behavior
			// e.g., Views.CustomView = require( '..' );
		} );


	} ) ( window.Tailor.Api.Element, window.Tailor.Api.Setting, Tailor.Views || {} );


/***/ }
/******/ ]);